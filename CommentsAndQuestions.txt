Attempting to run SuitesSparseQR<float> (...)


#include <SuiteSparseQR.hpp>
	#include "SuiteSparseQR_definitions.h"
		Ordering and definitiont.  Does not pertain to float/double
	#include "cholmod.h" (umbrella header)
		#include "cholmod_io64.h"
			#define _FILE_OFFSET_BITS 64

		#include "SuiteSparse_config.h" (contains a lot of doubles / double pointers)
			SuiteSparse_config_struct
			Timer values are all in doubles
				SuiteSparse_tic	double timers.
				SuiteSparse_toc
				SuiteSparse_time
			SuiteSparse_hypot
			SuiteSparse_divcomplex


		#include "cholmod_config.h"  (Looks almost deprecated. Makes a few empty #define calls)

		#include "cholmod_core.h"
			CHOLMOD_DOUBLE 0
			CHOLMOD_SINGE 1

			cholmod_common_struct


			cholmod_dbound
			cholmod_l_dbound
			cholmod_hypot
			cholmod_l_hypot
			cholmod_divcomplex
			cholmod_l_divcomplex

			cholmod_descendant_score_t

			(takse cholmod_common aka cholmod_common_struct as arguments)
				cholmod_allocate_sparse
				cholmod_free_sparse
				cholmod_l_free_sparse
				cholmod_reallocate_sparse
				cholmod_l_reallocate_sparse
				cholmod_nnz
				...
				MANY MORE

!!!!!!!!!!!!			(doubles as arguments)
				cholmod_add
				cholmod_l_add


		#ifndef NCHECK
		#include "cholmod_check.h"
		#endif
			Contains a lot of definitions which use cholmod_common.


		#ifndef NCHOLESKY
		#include "cholmod_cholesky.h"
		#endif

		#ifndef NMATRIXOPS
		#include "cholmod_matrixops.h"
		#endif

		#ifndef NMODIFY
		#include "cholmod_modify.h"
		#endif

		#ifndef NCAMD
		#include "cholmod_camd.h"
		#endif

		#ifndef NPARTITION
		#include "cholmod_partition.h"
		#endif

		#ifndef NSUPERNODAL
		#include "cholmod_supernodal.h"
		#endif

		#ifdef GPU_BLAS
		#include "cholmod_gpu.h"
		#endif




##  Trying to just replace double with float

#  cd into local directory.
$> cd $SUITE_SPARSE

#  Start from ground zero!
$> make purge; make clean; make uninstall;

#  Replace all instances of double with float.
$> find . -type f -print0| xargs -0 sed -i 's/double/float/g'

#  Replace string formatting with proper symbols.
$> find . -type f -print0| xargs -0 sed -i 's/%lg/%g/g'

---->> Should hang up on a demo in SPQR.  Lets not build it!
>> Comment out the ( cd Demo ; $(MAKE) )
$> gedit ${SUITE_SPARSE}/SPQR/Demo/Makefile

---->> Program should compile: Try running.
---->> Segfault when Running ?? No Problem !

go to spqr.hpp.  Replace the BLAS interface block with this:
More instructions below!

--------------------------------------------------------------------------------

// =============================================================================
// === BLAS interface ==========================================================
// =============================================================================

// To compile SuiteSparseQR with 64-bit BLAS, use -DBLAS64.  See also
// CHOLMOD/Include/cholmod_blas.h

extern "C" {
#include "cholmod_blas.h"
}

#undef CHECK_BLAS_INT
#undef EQ
#define CHECK_BLAS_INT (sizeof (BLAS_INT) < sizeof (Long))
#define EQ(K,k) (((BLAS_INT) K) == ((Long) k))

#ifdef SUN64

#define BLAS_DNRM2    dnrm2_64_
#define LAPACK_DLARF  dlarf_64_
#define LAPACK_DLARFG dlarfg_64_
#define LAPACK_DLARFT dlarft_64_
#define LAPACK_DLARFB dlarfb_64_

#define BLAS_DZNRM2   dznrm2_64_
#define LAPACK_ZLARF  zlarf_64_
#define LAPACK_ZLARFG zlarfg_64_
#define LAPACK_ZLARFT zlarft_64_
#define LAPACK_ZLARFB zlarfb_64_

#define BLAS_SNRM2    snrm2_
#define LAPACK_SLARF  slarf_
#define LAPACK_SLARFG slarfg_
#define LAPACK_SLARFT slarft_
#define LAPACK_SLARFB slarfb_

#elif defined (BLAS_NO_UNDERSCORE)

#define BLAS_DNRM2    dnrm2
#define LAPACK_DLARF  dlarf
#define LAPACK_DLARFG dlarfg
#define LAPACK_DLARFT dlarft
#define LAPACK_DLARFB dlarfb

#define BLAS_DZNRM2   dznrm2
#define LAPACK_ZLARF  zlarf
#define LAPACK_ZLARFG zlarfg
#define LAPACK_ZLARFT zlarft
#define LAPACK_ZLARFB zlarfb

#define BLAS_SNRM2    snrm2_
#define LAPACK_SLARF  slarf_
#define LAPACK_SLARFG slarfg_
#define LAPACK_SLARFT slarft_
#define LAPACK_SLARFB slarfb_

#else

#define BLAS_DNRM2    dnrm2_
#define LAPACK_DLARF  dlarf_
#define LAPACK_DLARFG dlarfg_
#define LAPACK_DLARFT dlarft_
#define LAPACK_DLARFB dlarfb_

#define BLAS_DZNRM2   dznrm2_
#define LAPACK_ZLARF  zlarf_
#define LAPACK_ZLARFG zlarfg_
#define LAPACK_ZLARFT zlarft_
#define LAPACK_ZLARFB zlarfb_

#define BLAS_SNRM2    snrm2_
#define LAPACK_SLARF  slarf_
#define LAPACK_SLARFG slarfg_
#define LAPACK_SLARFT slarft_
#define LAPACK_SLARFB slarfb_

#endif

// =============================================================================
// === BLAS and LAPACK prototypes ==============================================
// =============================================================================

extern "C"
{

void LAPACK_SLARFT (char *direct, char *storev, BLAS_INT *n, BLAS_INT *k,
    float *V, BLAS_INT *ldv, float *Tau, float *T, BLAS_INT *ldt) ;

void LAPACK_DLARFT (char *direct, char *storev, BLAS_INT *n, BLAS_INT *k,
    double *V, BLAS_INT *ldv, double *Tau, double *T, BLAS_INT *ldt) ;

void LAPACK_ZLARFT (char *direct, char *storev, BLAS_INT *n, BLAS_INT *k,
    Complex *V, BLAS_INT *ldv, Complex *Tau, Complex *T, BLAS_INT *ldt) ;

void LAPACK_SLARFB (char *side, char *trans, char *direct, char *storev,
    BLAS_INT *m, BLAS_INT *n, BLAS_INT *k, float *V, BLAS_INT *ldv,
    float *T, BLAS_INT *ldt, float *C, BLAS_INT *ldc, float *Work,
    BLAS_INT *ldwork) ;

void LAPACK_DLARFB (char *side, char *trans, char *direct, char *storev,
    BLAS_INT *m, BLAS_INT *n, BLAS_INT *k, double *V, BLAS_INT *ldv,
    double *T, BLAS_INT *ldt, double *C, BLAS_INT *ldc, double *Work,
    BLAS_INT *ldwork) ;

void LAPACK_ZLARFB (char *side, char *trans, char *direct, char *storev,
    BLAS_INT *m, BLAS_INT *n, BLAS_INT *k, Complex *V, BLAS_INT *ldv,
    Complex *T, BLAS_INT *ldt, Complex *C, BLAS_INT *ldc, Complex *Work,
    BLAS_INT *ldwork) ;

double BLAS_SNRM2 (BLAS_INT *n, float *X, BLAS_INT *incx) ;

double BLAS_DNRM2 (BLAS_INT *n, double *X, BLAS_INT *incx) ;

double BLAS_DZNRM2 (BLAS_INT *n, Complex *X, BLAS_INT *incx) ;

void LAPACK_SLARFG (BLAS_INT *n, float *alpha, float *X, BLAS_INT *incx,
    float *tau) ;

void LAPACK_DLARFG (BLAS_INT *n, double *alpha, double *X, BLAS_INT *incx,
    double *tau) ;

void LAPACK_ZLARFG (BLAS_INT *n, Complex *alpha, Complex *X, BLAS_INT *incx,
    Complex *tau) ;

void LAPACK_SLARF (char *side, BLAS_INT *m, BLAS_INT *n, float *V,
    BLAS_INT *incv, float *tau, float *C, BLAS_INT *ldc, float *Work) ;

void LAPACK_DLARF (char *side, BLAS_INT *m, BLAS_INT *n, double *V,
    BLAS_INT *incv, double *tau, double *C, BLAS_INT *ldc, double *Work) ;

void LAPACK_ZLARF (char *side, BLAS_INT *m, BLAS_INT *n, Complex *V,
    BLAS_INT *incv, Complex *tau, Complex *C, BLAS_INT *ldc, Complex *Work) ;

}

#endif

--------------------------------------------------------------------------------

#  Replace every instance of the above DLARF with SLARF
$> find . -type f -print0| xargs -0 sed -i 's/%DNRM2/%SNRM2/g'

$> find . -type f -print0| xargs -0 sed -i 's/%DLARF/%SLARF/g'

--------------------------------------------------------------------------------

If compiling is erroring on cuda*, set value in SuiteSparse_config.mk:

CUDA=no

Final build command:

$> make clean; make purge; make -j40 BLAS="full-path-to-libblas.so"















